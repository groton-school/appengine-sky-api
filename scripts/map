#!/usr/bin/env php
<?php

use Battis\DataUtilities\Path;
use Battis\Loggable\Loggable;
use Battis\OpenAPI\CLI\Map;
use Battis\OpenAPI\Generator\Sanitize;
use cebe\openapi\spec\OpenApi;
use Monolog\Handler\ErrorLogHandler;
use Monolog\Logger;
use pahanini\Monolog\Formatter\CliFormatter;

require __DIR__ . "/../vendor/autoload.php";

class MySanitize extends Sanitize {
  public static function getInstance(): Sanitize
  {
     if (parent::$instance === null) {
       parent::$instance = new MySanitize();
     } 
     return parent::$instance;
  }
  public function rename(string $name): string
  {
    return $name . "Renamed";
  }
}

class BlackbaudMap extends Map {
  protected function getNamespaceFromSpec(string $specPath, OpenApi $spec, string $baseNamespace): string
  {
    return Path::join("\\",array_merge([$baseNamespace], explode(" ", $spec->info->title)));
  }
  
  protected function getBasePathFromSpec(string $specPath, OpenApi $spec, string $basePath): string
  {
    return Path::join(array_merge([$basePath], explode(" ", $spec->info->title)));  
  }
}

$logger = new Logger('console');
$handler = new ErrorLogHandler();
$handler->setFormatter(new CliFormatter());
$logger->pushHandler($handler);
Loggable::init($logger);

$map = new BlackbaudMap($logger);
$map->run();